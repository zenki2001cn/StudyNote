= 包、类和对象 =

%toc

== 包的定义 ==
- 一个包是一个其中带有特殊文件__init__.py的目录。 __init__.py 文件定义了包的属性和方法。其实它可以什么也不定义；可以只是一个空文件，但是必须要存在。如果 __init__.py 不存在，这个目录就仅仅是一个目录，而不是一个包，它就不能被导入或者包含其它的模块和嵌套包。

{{{class="brush:text"
# 包结构的示例
Python21/               Python安装根目录(可执行文件的所在地)
|
+--lib/                 库目录(标准库模块的所在地)
    |
    +-- xml/            xml包(实际上目录中还有其它东西)
        |
        +--sax/         xml.sax包(也只是一个目录)
        |
        +--dom/         xml.dom包(包含 minidom.py)
        |
        +--parsers/     xml.parsers包(内部使用)
}}}

- __init__.py中还可以包含变量 __all__，该变量指定了`from package import *`语法所导入进来的模块名。

{{{class="brush:python"
# __init__.py
__all__ = ['Module1', 'Module2', 'Package2']
}}}

== 类的定义 ==
{{{class="brush:python"
class UserDict:
    pass
}}}

== 类成员和对象成员 ==
- 在Java中，静态变量(在Python中叫类成员)和实例变量(在Python中叫对象成员)两者都是紧跟在类定义之后定义的(一个有static关键字，一个没有)。在Python 中，只有类成员可以定义在这里，对象成员定义在__init__方法中。

{{{class="brush:python"
class MP3FileInfo(FileInfo):
    ''' tagDataMap是类成员 '''
    tagDataMap = {"title"   : (  3,  33, stripnulls),
                    "artist"  : ( 33,  63, stripnulls),
                    "album"   : ( 63,  93, stripnulls),
                    "year"    : ( 93,  97, stripnulls),
                    "comment" : ( 97, 126, stripnulls),
                    "genre"   : (127, 128, ord)}
                    
    def __init__(self):
        ''' filename是对象成员 '''
        self.filename = ""
}}}

== 私有成员和公有成员 ==
- 与大多数语言一样，Python 也有私有的概念：
    * 私有函数`可以`被子类重载和`覆盖`，使用`前后双下划线`，如`__name__`和`__my_name__`。
    * 私有类方法`不能`够被子类`覆盖`，使用`前双下划线__`作为前缀，如`__my_name()`、`__say_hello`。
    * 私有成员或方法`不能`够从它们的类外面`被访问`，使用`单下划线_`作为前缀，如`_name`、`_hello()`。注意，该方法不是Python语法强制规定，而是约定俗成。

== 类的继承 ==
{{{class="brush:python"
class FileInfo(UserDict):
    pass
}}}

== 类的初始化 ==
- _init_方法是可选的，但是如果定义了该方法，就必须调用基类的__init__。
- 类成员方法的第一个参数必须为self，包括__init__方法。
{{{class="brush:python"
class FileInfo(UserDict):
    "store file metadata"
    def __init__(self, filename=None): 
        # 调用基类的构造方法
        UserDict.__init__(self)
        self["name"] = filename
}}}

== 类的实例化 ==
{{{class="brush:python"
>>> import fileinfo
# 实例化FileInfo类
>>> f = fileinfo.FileInfo("/music/_singles/kairo.mp3")
# 查看class信息
>>> f.__class__                                       
<class fileinfo.FileInfo at 010EC204>
# 查看doc信息
>>> f.__doc__
'store file metadata'
>>> f
{'name': '/music/_singles/kairo.mp3'}
}}}

== 静态方法、类方法和抽象方法 ==
=== 静态方法 ===
- 静态方法不依赖对象本身的状态，同时也可以被实例对象调用。
- 可以在子类中被覆盖。
{{{class="brush:python"
class Pizza(object):
    @staticmethod
    def mix_ingredients(x, y):
        return x + y

    def cook(self):
        return self.mix_ingredients(self.cheese, self.vegetables)
}}}

=== 类方法 ===
- 类方法被绑定到类上，与实例对象无关。
{{{class="brush:python"
class Pizza(object):
    radius = 42

    @classmethod
    def get_radius(cls):
        return cls.radius
}}}

=== 抽象方法 ===
{{{class="brush:python"
# 方式一：
class Pizza(object):
    def get_radius(self):
        raise NotImplementedError

# 方式二：
import abc

class Pizza(object):
    __metaclass__ = abc.ABCMeta
    
    @abc.abstractmethod
    def get_radius(self):
    """do something"""
}}}

== 获取和设置成员数据 ==
=== ___getitem___ ===
{{{class="brush:python"
"""
def __getitem__(self, key): return self.data[key]
"""

# 实现了__getitem__方法后，可以通过[]下标形式访问类成员
>>> f = fileinfo.FileInfo("/music/_singles/kairo.mp3")
>>> f
{'name':'/music/_singles/kairo.mp3'}
>>> f.__getitem__("name")
'/music/_singles/kairo.mp3'
>>> f["name"]
'/music/_singles/kairo.mp3'
}}}

=== ___setitem___ ===
{{{class="brush:python"
"""
def __setitem__(self, key, item): self.data[key] = item
"""
# 实现了__setitem__方法后，可以通过[]下标形式访问类成员
>>> f
{'name':'/music/_singles/kairo.mp3'}
>>> f.__setitem__("genre", 31)
>>> f
{'name':'/music/_singles/kairo.mp3', 'genre':31}
>>> f["genre"] = 32
>>> f
{'name':'/music/_singles/kairo.mp3', 'genre':32}
}}}

=== ___delitem___ ===
- 当你在类实例中使用del时，Python替你调用__delitem__专用方法。
{{{class="brush:python"
def __delitem__(self, key): 
    del self.data[key]
}}}

== 反向引用 ==
=== ___repr___ ===
- __repr__ 是一个专用的方法，在当调用repr(instance)时被调用。repr函数是一个内置函数，它返回一个对象的字符串表示。它可以用在任何对象上，不仅仅是类的实例。
{{{class="brush:python"
def __repr__(self): 
    return repr(self.data) 
}}}

== 返回字符串 ==
=== ___str___ ===
- 当str方法调用时，以一个字符串形式表示该对象。
{{{class="brush:python"
def __str__(self):
    return self.name
}}}

== 对象比较 ==
=== ___cmp___ ===
- __cmp__ 在比较类实例时被调用。通常，你可以通过使用“==”比较任意两个Python对象，不只是类实例。
{{{class="brush:python"
def __cmp__(self, dict):
    if isinstance(dict, UserDict):            
        return cmp(self.data, dict.data)
}}}

== 返回对象长度 ==
=== ___len___ ===
- __len__ 在调用len(instance)时被调用。len是一个内置函数，可以返回一个对象的长度。它可以用于任何被认为理应有长度的对象。对于类实例，定义__len__ 方法，接着自已编写长度的计算，然后调用len(instance)，Python将替你调用你的__len__专用方法。
{{{class="brush:python"
def __len__(self): 
    return len(self.data)
}}}

== 模块名称 ==
=== ___module___ ===
- 每个Python类都拥有一个内置的类属性__module__，它定义了这个类的模块的名字。
- 将它与sys.modules字典复合使用，你可以得到定义了某个类的模块的引用。
{{{class="brush:python"
# 从类的__module__方法中得到该类从属的模块
>>> from fileinfo import MP3FileInfo
>>> MP3FileInfo.__module__
'fileinfo'

# 配合sys.modules得到该模块的引用
>>> sys.modules[MP3FileInfo.__module__]
<module 'fileinfo' from 'fileinfo.pyc'>
}}}

== 对象属性 ==
=== ___dict___ ===
- 每个类对象包含一个字典成员__dict__，它返回一组`成员名称：值`。
- 可通过遍历该变量，访问该类对象的成员和方法。

== 属性 ==
=== 只读属性@pproperty ===
- 通过修饰符设置类成员为只读，且使函数直接返回值。
{{{class="brush:python"
class A(object):
    @property
    def say_hello(self):
        print "hello"
}}}

=== 可写属性property ===
- 类的函数作为一种属性被访问
{{{class="brush:python"
class A(object):
    def __init__(self):
        self._msg = None

    def get_msg(self):
        return self._msg
        
    def set_msg(self, msg):
        self._msg = msg

    # 内置函数property
    hello = property(set_msg, get_msg)
}}}

=== 导出单个文件的对象 ===
- `__all__`变量导出单个文件中的对象或属性。
{{{class="brush:python"
class IModbusDecoder(object):
    pass
    
class IModbusFramer(object):
    pass
    
class IModbusFramer(object):
    pass

__all__ = [
    'IModbusDecoder', 'IModbusFramer', 'IModbusSlaveContext',
]
}}}
