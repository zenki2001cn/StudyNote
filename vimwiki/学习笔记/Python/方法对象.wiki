= 方法对象 =

%toc

== 生成器函数和yield表达式 ==
- `yield`用来生成Generator函数，该函数和普通函数有很大区别。一旦声明成Generator函数，需要调用next()方法来控制Generator函数的运行。
- 每次调用next()方法会返回yield表达式的值。
- 可通过for循环自动执行一个Generator函数的next()方法。
- 当循环结束时，next()方法会返回None。
- send()方法作用与next()一样，区别是可以给yield传递参数。
- [[http://www.cnblogs.com/coderzh/archive/2008/05/18/1202040.html|参考链接]]

{{{class="brush:python"
def generator():
    rtn = yield "here"

# 手动调用next()方法
>>> func = generator()
>>> func.next()
here

# 手动调用send()方法
>>> func = generator()
>>> func.send("there")
there

# 通过循环调用next()方法
# 推荐内置的for循环，或内置的next()函数
>>> for i in func:
...     print i

here
None
}}}

== 迭代器函数和next方法 ==
- 对于原生支持随机访问的数据结构（如tuple、list），迭代器和经典for循环的索引访问相比并无优势，反而丢失了索引值。但对于无法随机访问的数据结构（比如set）而言，迭代器是唯一的访问元素的方式。
- 迭代器的一大优点是不要求事先准备好整个迭代过程中所有的元素。迭代器仅仅在迭代到某个元素时才计算该元素，而在这之前或之后，元素可以不存在或者被销毁。这个特点使得它特别适合用于遍历一些巨大的或是无限的集合，比如几个G的文件，或是斐波那契数列等等。
- 迭代器更大的功劳是提供了一个统一的访问集合的接口，只要定义了__iter__()方法对象，就可以使用迭代器访问。
    - `next`方法：返回迭代器的下一个元素。
    - `__iter__`方法：返回迭代器对象本身

{{{class="brush:python"
# 生成斐波那契数列
class Fab(object):
    def __init__(self, max):
        self.max = max
        self.n, self.a, self.b = 0, 0, 1
 
    def __iter__(self):
        return self                                     # 通常返回对象自身
 
    def next(self):
        if self.n < self.max:                           # 
            r = self.b
            self.a, self.b = self.b, self.a + self.b    # 更新值
            self.n = self.n + 1                         # 更新计数
            return r
            
        raise StopIteration()                           # 大于最大值，抛出异常
        
# 使用示例一：通过for循环迭代
for key in Fabs(5):
    print key
    
# 使用示例二：通过next方法迭代
>>> f = fab(3)
>>> f.next()
1
>>> f.next()
1
>>> f.next()
2
>>> f.next()
Traceback (most recent call last):
 File "<pyshell#62>", line 1, in <module>
  f.next()
StopIteration
}}}

== 可选参数和命名参数 ==
- 在函数定义时可以对该函数的参数赋予默认的值，在调用时没有传递的参数将被赋予默认值。

{{{class="brush:python"
def info(object, spacing=10, collapse=1):
    pass
    
>>> info(a)
>>> info(a, 30)
>>> info(a, 40, 50)
}}}

== 内嵌方法定义 ==
- Python支持在方法内部定义另一个方法，而内嵌方法只能被外部方法调用。

{{{class="brush:python"
def foo():
    # foo函数内部定义了bar函数
    def bar():
        foo_a = 100
        print foo_a

    # 只能在foo函数内部调用该方法
    bar()

foo()
}}}

== 闭包引起的问题 ==
- 闭包是在内嵌方法定义的时候产生，在内嵌方法中引用了外部方法定义的局部变量，见下面示例。
- 闭包产生的原因和Python语法原则：
    - 等号`左边的变量`会被处理称`为局部变量`。
    - 默认情况下Python查找变量的顺序为`local->闭包->global`。
    - 内嵌方法处理foo_a时，首先将它视为局部变量，而该局部变量在bar方法中是没有被定义的。
- 综上所述，闭包引起的问题可以认为是内嵌方法访问局部变量的问题。

{{{class="brush:python"
def foo():
    """foo函数定义的局部变量"""
    foo_a = 100

    def bar():
        """
        bar函数引用了foo函数的局部变量foo_a，
        并且在=号左边引用时，该变量被认为是bar函数的局部变量，
        因此在=号右边再次引用时，该变量会引起没有定义的异常。
        """
        foo_a = foo_a + 1
        # foo_b = foo_a + 1     // 可执行通过，foo_b等于101，foo_a仍然等于100
        # foo_a = 1 + 1         // 可执行通过，bar内部的foo_a等于2，foo内部的foo_a仍然等于100
        print foo_a     # 引起未定义的局部变量异常

    bar()
    print foo_a

foo()
}}}
