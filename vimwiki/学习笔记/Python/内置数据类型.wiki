= 内置数据类型 =

%toc

== List使用 ==
=== 切片 ===
- 切片以`0`为开始索引，`-1`为末尾的索引。
- [start:end]的切片形式表示从`start`索引开始，不包含`end`索引结束的区间。

{{{class="brush:python"
>>> a_list 
['a', 'b', 'mpilgrim', 'z', 'example'] 

# 步进为2切片
>>> a_list[::2]
['a', 'mpilgrim', 'example'] 

# 负步进切片
>>> a_list[::-1]
['example', 'z', 'mpilgrim', 'b', 'a'] 

>>> a_list[::-2]
['example', 'mpilgrim', 'a'] 

>>> a_list[1:3] 
['b', 'mpilgrim'] 

>>> a_list[1:-1] 
['b', 'mpilgrim', 'z'] 

>>> a_list[0:3] 
['a', 'b', 'mpilgrim'] 

>>> a_list[:3] 
['a', 'b', 'mpilgrim'] 

>>> a_list[3:] 
['z', 'example'] 

>>> a_list[:] 
['a', 'b', 'mpilgrim', 'z', 'example']
}}}

=== slice命名切片 ===
{{{class="brush:python"
# slice(start, end, step)
>>> a = [0, 1, 2, 3, 4, 5]
>>> sl = slice(1, -1, 1)
>>> sl
slice(1, -1, 1)
>>> a[sl]
[1, 2, 3, 4]
}}}

=== extend和append ===
- extend用来扩展List的大小，并且扩展后的数据为同一类型。
- append用来在List后追加数据，并且追加的数据可以是其他类型。

{{{class="brush:python"
>>> li = ['a', 'b', 'c']
>>> li.extend(['d', 'e', 'f'])
>>> li
['a', 'b', 'c', 'd', 'e', 'f']
>>> len(li) 
6

>>> li = ['a', 'b', 'c']
>>> li.append(['d', 'e', 'f']) 
>>> li
['a', 'b', 'c', ['d', 'e', 'f']]
>>> len(li)                    
4
}}}

=== 映射List ===
- 可以在`[]`内部进行元素遍历和条件判断的操作，操作后结果仍然是一个List

{{{class="brush:python"
>>> a = [1, 2, 3, 4]
>>> [i+1 for i in a if i > 1]
[3, 4, 5]

>>> params = {"server":"mpilgrim", "database":"master", "uid":"sa", "pwd":"secret"}
>>> params.items()
[('server', 'mpilgrim'), ('uid', 'sa'), ('database', 'master'), ('pwd', 'secret')]
    
>>> [k for k, v in params.items()]                
['server', 'uid', 'database', 'pwd']
>>> [v for k, v in params.items()]                
['mpilgrim', 'sa', 'master', 'secret']
>>> ["%s=%s" % (k, v) for k, v in params.items()] 
['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']

# 摊平列表
>>> a = [[1, 2], [3, 4], [5, 6]]
>>> list(itertools.chain.from_iterable(a))
[1, 2, 3, 4, 5, 6]
 
>>> sum(a, [])
[1, 2, 3, 4, 5, 6]
 
>>> [x for l in a for x in l]
[1, 2, 3, 4, 5, 6]
 
>>> a = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
>>> [x for l1 in a for l2 in l1 for x in l2]
[1, 2, 3, 4, 5, 6, 7, 8]
 
>>> a = [1, 2, [3, 4], [[5, 6], [7, 8]]]
>>> flatten = lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]
>>> flatten(a)
[1, 2, 3, 4, 5, 6, 7, 8]
}}}

== 字符串处理 ==
=== Tuple格式化字符串 ===
{{{class="brush:python"
# 使用Tuple格式化
>>> k = "uid"
>>> v = "sa"
>>> "%s=%s" % (k, v)
'uid=sa'

>>> print "Today's stock price: %f" % 50.4625   
50.462500
>>> print "Today's stock price: %.2f" % 50.4625 
50.46
>>> print "Change since yesterday: %+.2f" % 1.5 
+1.50
}}}

=== Dict格式化字符串 ===
- 格式为`"%(key)s" % {key:value...}`，括号里面的`key没有引号`，并且`括号后面需要加s`。
 
{{{class="brush:python"
# 使用Dict格式化
>>> "one=%(1)s, two=%(2)s" % {'1':'one', '2':'two'}
'one=one, two=two'
}}}

=== 字符串连接 ===
{{{class="brush:python"
>>> li = ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
>>> s = ";".join(li)
>>> s
'server=mpilgrim;uid=sa;database=master;pwd=secret'
}}}

=== 字符串分割 ===
{{{class="brush:python"
>>> s = ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
>>> s.split(";")    1
['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
>>> s.split(";", 1) 2
['server=mpilgrim', 'uid=sa;database=master;pwd=secret']
}}}

=== 字符矩阵转换 ===
- 通过string.maketrans方法创建一个对应的转换矩阵对象，`两个参数的长度必须一样`。
- 再通过string.translate方法根据这个矩阵对象转换任意的字符串。

{{{class="brush:python"
# 做如下转换矩阵
# a => 1
# b => 2
# c => 3
>>> t = string.maketrans('abc', '123')

# 转换字符串'abcbabc'
>>> s = 'abcbabc'
>>> s.translate(t)
'1232123'
}}}

== Dictionary使用 ==
- Dictionary类似于Perl中的hash，称为字典。格式为`{key:value...}`。

=== 声明字典变量 ===
{{{class="brush:python"
>>> d = {"server":"mpilgrim", "database":"master"}
>>> d
{'server': 'mpilgrim', 'database': 'master'}

# 通过列表组装
>>> given = ['John', 'Eric', 'Terry', 'Michael']
>>> family = ['Cleese', 'Idle', 'Gilliam', 'Palin']
>>> pythons = dict(zip(given, family))
>>> print pythons
{'John': 'Cleese', 'Michael': 'Palin', 'Eric': 'Idle', 'Terry': 'Gilliam'}
}}}

=== 修改字典成员 ===
{{{class="brush:python"
>>> d["database"] = "pubs"
>>> d
{'server': 'mpilgrim', 'database': 'pubs'}
}}}

=== 删除字典成员 ===
{{{class="brush:python"
>>> del d["database"]
>>> d
{'server': 'mpilgrim'}
}}}

=== 遍历字典 ===
{{{class="brush:python"
>>> for k, v in os.environ.items():
...     print "%s=%s" % (k, v)

# 直接遍历key
>>> for key in os.environ.items():
...     print key
}}}

=== 映射字典 ===
{{{class="brush:python"
>>> m = {x: x ** 2 for x in range(5)}
>>> m
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
 
>>> m = {x: 'A' + str(x) for x in range(5)}
>>> m
{0: 'A0', 1: 'A1', 2: 'A2', 3: 'A3', 4: 'A4'}
}}}

=== 字典排序 ===
{{{class="brush:python"
>>> m = dict((str(x), x) for x in range(10))
>>> print ', '.join(m.keys())
1, 0, 3, 2, 5, 4, 7, 6, 9, 8

# 递增排序
>>> m = collections.OrderedDict((str(x), x) for x in range(10))
>>> print ', '.join(m.keys())
0, 1, 2, 3, 4, 5, 6, 7, 8, 9

# 递减排序
>>> m = collections.OrderedDict((str(x), x) for x in range(10, 0, -1))
>>> print ', '.join(m.keys())
10, 9, 8, 7, 6, 5, 4, 3, 2, 1

# regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

# 按key排序
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

# 按值排序
>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

# 按key长度排序
>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])
}}}

=== 缺省字典 ===
{{{class="brush:python"
# 一般字典在缺少key时会引发异常
>>> m = dict()
>>> m['a']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'a'

# 使用collections.defaultdict避免引发异常
>>> m = collections.defaultdict(int)
>>> m['a']
0
>>> m['b']
0
>>> m = collections.defaultdict(str)
>>> m['a']
''
>>> m['b'] += 'a'
>>> m['b']
'a'
>>> m = collections.defaultdict(lambda: '[default value]')
>>> m['a']
'[default value]'
>>> m['b']
'[default value]'
}}}

== 命名元组（namedtuple） ==
- 使用collections.namedtuple模块。

{{{class="brush:python"
# 命名元组
>>> Point = collections.namedtuple('Point', ['x', 'y'])
>>> p = Point(x=1.0, y=2.0)
>>> p
Point(x=1.0, y=2.0)
>>> p.x
1.0
>>> p.y
2.0

# 命名元组继承
>>> class Point(collections.namedtuple('PointBase', ['x', 'y'])):
...     __slots__ = ()
...     def __add__(self, other):
...         return Point(x=self.x + other.x, y=self.y + other.y)
...
>>> p = Point(x=1.0, y=2.0)
>>> q = Point(x=2.0, y=3.0)
>>> p + q
Point(x=3.0, y=5.0)
}}}

== 集合和统计（Counter） ==
- 使用collections.Counter。

=== 列表集合 ===
{{{class="brush:python"
>>> A = {1, 2, 3, 3}
>>> A
set([1, 2, 3])
>>> B = {3, 4, 5, 6, 7}
>>> B
set([3, 4, 5, 6, 7])

# 合并集合
>>> A | B
set([1, 2, 3, 4, 5, 6, 7])

# 求交集
>>> A & B
set([3])

# A-B
>>> A - B
set([1, 2])

# B-A
>>> B - A
set([4, 5, 6, 7])

# 求异或
>>> A ^ B
set([1, 2, 4, 5, 6, 7])

>>> (A ^ B) == ((A - B) | (B - A))
True
}}}

=== 多重集合 ===
{{{class="brush:python"
>>> A = collections.Counter([1, 2, 2])
>>> B = collections.Counter([2, 2, 3])
>>> A
Counter({2: 2, 1: 1})
>>> B
Counter({2: 2, 3: 1})

# 求合集
>>> A | B
Counter({2: 2, 1: 1, 3: 1})

# 求交集
>>> A & B
Counter({2: 2})

# 求合集
>>> A + B
Counter({2: 4, 1: 1, 3: 1})

# 求差集
>>> A - B
Counter({1: 1})

# 求差集
>>> B - A
Counter({3: 1})
}}}

=== 集合统计 ===
{{{class="brush:python"
>>> A = collections.Counter([1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 6, 7])
>>> A
Counter({3: 4, 1: 2, 2: 2, 4: 1, 5: 1, 6: 1, 7: 1})

# 统计出现1次的元素
>>> A.most_common(1)
[(3, 4)]

# 统计出现3次的元素
>>> A.most_common(3)
[(3, 4), (1, 2), (2, 2)]
}}}

== 有效数组Array ==
- Array模块定义了一个很像list的新对象类型，不同之处在于它限定了这个类型只能装一种类型的元素。Array元素的类型是在创建并使用的时候确定的。
- 如果你的程序需要优化内存的使用，并且你确定你希望在list中存储的数据都是同样类型的，那么使用Array模块很合适。

{{{class="brush:python"
import array
from timeit import Timer
 
def arraytest():
    a = array.array("i", [1, 2, 3, 4, 5])
    b = array.array(a.typecode, (2 * x for x in a))
 
def enumeratetest():
    a = array.array("i", [1, 2, 3, 4, 5])
    for i, x in enumerate(a):
        a[i] = 2 * x
 
if __name__=='__main__':
    m = Timer("arraytest()", "from __main__ import arraytest")
    n = Timer("enumeratetest()", "from __main__ import enumeratetest")
 
    print m.timeit() # 5.22479210582
    print n.timeit() # 4.34367196717
}}}

== 优先级队列Heapq ==
- Heapq模块使用一个用堆实现的优先级队列。堆是一种简单的有序列表，并且置入了堆的相关规则。

{{{class="brush:python"
import heapq
 
portfolio = [
    {'name': 'IBM', 'shares': 100, 'price': 91.1},
    {'name': 'AAPL', 'shares': 50, 'price': 543.22},
    {'name': 'FB', 'shares': 200, 'price': 21.09},
    {'name': 'HPQ', 'shares': 35, 'price': 31.75},
    {'name': 'YHOO', 'shares': 45, 'price': 16.35},
    {'name': 'ACME', 'shares': 75, 'price': 115.65}
]

cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])
 
print cheap
 
# [{'price': 16.35, 'name': 'YHOO', 'shares': 45}, 
# {'price': 21.09, 'name': 'FB', 'shares': 200}, 
# {'price': 31.75, 'name': 'HPQ', 'shares': 35}]
 
print expensive
 
# [{'price': 543.22, 'name': 'AAPL', 'shares': 50}, 
# {'price': 115.65, 'name': 'ACME', 'shares': 75}, 
# {'price': 91.1, 'name': 'IBM', 'shares': 100}]
}}}

== 有序列表Bisect ==
- Bisect模块能够提供保持list元素序列的支持。它使用了二分法完成大部分的工作。它在向一个list插入元素的同时维持list是有序的。

{{{class="brush:python"
import bisect
 
a = [(0, 100), (150, 220), (500, 1000)]
 
bisect.insort_right(a, (250,400))
bisect.insort_right(a, (399, 450))
print a 

# [(0, 100), (150, 220), (250, 400), (500, 1000)]
 
# 仅返回插入点位置，不修改列表
print bisect.bisect(a, (550, 1200)) 

# 5

bisect.insort_right(a, (550, 1200))
print a 

# [(0, 100), (150, 220), (250, 400), (399, 450), (500, 1000), (550, 1200)]
}}}
