= 内置数据类型 =

%toc

== List使用 ==
=== 切片 ===
- 切片以`0`为开始索引，`-1`为末尾的索引。
- [start:end]的切片形式表示从`start`索引开始，不包含`end`索引结束的区间。

{{{class="brush:python"
>>> a_list 
['a', 'b', 'mpilgrim', 'z', 'example'] 

>>> a_list[::-1]
['example', 'z', 'mpilgrim', 'b', 'a'] 

>>> a_list[1:3] 
['b', 'mpilgrim'] 

>>> a_list[1:-1] 
['b', 'mpilgrim', 'z'] 

>>> a_list[0:3] 
['a', 'b', 'mpilgrim'] 

>>> a_list[:3] 
['a', 'b', 'mpilgrim'] 

>>> a_list[3:] 
['z', 'example'] 

>>> a_list[:] 
['a', 'b', 'mpilgrim', 'z', 'example']
}}}

=== extend和append ===
- extend用来扩展List的大小，并且扩展后的数据为同一类型。
- append用来在List后追加数据，并且追加的数据可以是其他类型。

{{{class="brush:python"
>>> li = ['a', 'b', 'c']
>>> li.extend(['d', 'e', 'f'])
>>> li
['a', 'b', 'c', 'd', 'e', 'f']
>>> len(li) 
6

>>> li = ['a', 'b', 'c']
>>> li.append(['d', 'e', 'f']) 
>>> li
['a', 'b', 'c', ['d', 'e', 'f']]
>>> len(li)                    
4
}}}

=== 映射List ===
- 可以在`[]`内部进行元素遍历和条件判断的操作，操作后结果仍然是一个List

{{{class="brush:python"
>>> a = [1, 2, 3, 4]
>>> [i+1 for i in a if i > 1]
[3, 4, 5]

>>> params = {"server":"mpilgrim", "database":"master", "uid":"sa", "pwd":"secret"}
>>> params.items()
[('server', 'mpilgrim'), ('uid', 'sa'), ('database', 'master'), ('pwd', 'secret')]
    
>>> [k for k, v in params.items()]                
['server', 'uid', 'database', 'pwd']
>>> [v for k, v in params.items()]                
['mpilgrim', 'sa', 'master', 'secret']
>>> ["%s=%s" % (k, v) for k, v in params.items()] 
['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
}}}

== 字符串处理 ==
=== Tuple格式化字符串 ===
{{{class="brush:python"
# 使用Tuple格式化
>>> k = "uid"
>>> v = "sa"
>>> "%s=%s" % (k, v)
'uid=sa'

>>> print "Today's stock price: %f" % 50.4625   
50.462500
>>> print "Today's stock price: %.2f" % 50.4625 
50.46
>>> print "Change since yesterday: %+.2f" % 1.5 
+1.50
}}}

=== Dict格式化字符串 ===
- 格式为`"%(key)s" % {key:value...}`，括号里面的`key没有引号`，并且`括号后面需要加s`。
 
{{{class="brush:python"
# 使用Dict格式化
>>> "one=%(1)s, two=%(2)s" % {'1':'one', '2':'two'}
'one=one, two=two'
}}}

=== 字符串连接 ===
{{{class="brush:python"
>>> li = ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
>>> s = ";".join(li)
>>> s
'server=mpilgrim;uid=sa;database=master;pwd=secret'
}}}

=== 字符串分割 ===
{{{class="brush:python"
>>> s = ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
>>> s.split(";")    1
['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
>>> s.split(";", 1) 2
['server=mpilgrim', 'uid=sa;database=master;pwd=secret']
}}}

=== 字符矩阵转换 ===
- 通过string.maketrans方法创建一个对应的转换矩阵对象，`两个参数的长度必须一样`。
- 再通过string.translate方法根据这个矩阵对象转换任意的字符串。

{{{class="brush:python"
# 做如下转换矩阵
# a => 1
# b => 2
# c => 3
>>> t = string.maketrans('abc', '123')

# 转换字符串'abcbabc'
>>> s = 'abcbabc'
>>> s.translate(t)
'1232123'
}}}

== Dictionary使用 ==
- Dictionary类似于Perl中的hash，称为字典。格式为`{key:value...}`。

=== 声明字典变量 ===
{{{class="brush:python"
>>> d = {"server":"mpilgrim", "database":"master"}
>>> d
{'server': 'mpilgrim', 'database': 'master'}
}}}

=== 修改字典成员 ===
{{{class="brush:python"
>>> d["database"] = "pubs"
>>> d
{'server': 'mpilgrim', 'database': 'pubs'}
}}}

=== 删除字典成员 ===
{{{class="brush:python"
>>> del d["database"]
>>> d
{'server': 'mpilgrim'}
}}}

=== 遍历字典 ===
{{{class="brush:python"
>>> for k, v in os.environ.items():
...     print "%s=%s" % (k, v)
}}}
