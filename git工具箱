1. Git 配置

1.1 设置用户名与邮箱
$ git config --global user.name "Zenki.J.Zha"
$ git config --global user.email "zenki2001cn@163.com"

1.2 配置编辑器
$ git config --global core.editor vim
$ git config --global merge.tool vimdiff

1.3 访问https
1.3.1 获取SSL证书文件
$ echo | openssl s_client -connect 10.180.34.35:443 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ~/10.180.34.35.crt
1.3.2 配置证书文件
$ git config --global http.sslcainfo ~/10.180.34.35.crt

访问https
$ git clone https://username@IP_Address/project_location

1.4 设置传输字节大小
$ git config http.postBuffer 54288000

1.4 访问SSH服务器
1.4.1   生成公钥和密钥
$ ssh-keygen -t rsa -C "zenki2001cn@163.com"

1.4.2   添加公钥到服务器 
# 将公钥信息添加到服务器，服务器会提供如Web方式，导入你的公钥。
# 同时修改你的公钥和密钥权限
$ chmod 700 ~/.ssh/
$ chmod 600 ~/.ssh/*

1.4.3   添加配置信息
# 添加以下信息到~/.ssh/config，用来管理登录信息
Host tr
  Hostname gerrit.ext.ti.com
  Port 29418
  User Zenki
  IdentityFile ~/.ssh/id_rsa

1.4.4   添加rsa密钥
$ ssh-add ~/.ssh/id_rsa

1.4.5   启用ssh-agent
$ ssh-agent 

1.5 配置默认的远程分支
$ git config branch.master.remote origin
$ git config branch.master.merge refs/heads/master

1.6 查看配置
$ git config -l

1.7 配置文件示例
# 以下是.gitconfig配置文件的示例：
####################################################
[color]
	ui = auto
    status = auto
    branch = auto
[http]
	sslVerify = false
	sslcainfo = /home/zenki/10.180.34.35.crt
[user]
	name = Zenki.J.Zha
	email = Zenki.J.Zha@foxconn.com
	;name = git@127.0.0.1
    ;signingkey = <gpg-key-id>
[branch "gh-pages"]
    ; 远程库名称    
    remote = origin
    ; merge的远程分支名称
    merge = refs/heads/gh-pages
[core]
	editor = vim
[merge]
	tool = vimdiff
[alias]
    au = add -u
    aa = add -A
    co = checkout
    ci = commit -m 
    st = status
    oneline = log --pretty=oneline
    oneline2 = log --pretty=oneline --since='2 days ago'
    onelog = log -p -1
    diffl = diff --stat
    graph = log --oneline --decorate --graph
[diff]
    tool = meld
[difftool]
    prompt = false
####################################################

2. Git 常用命令

2.1 clone   提取代码
$ git clone git@server:app.git myrepo

# 需要merge才能合到本地代码中
$ git fetch

# 合并更新后的代码到本地
$ git merge

# “git pull”是“git fetch”和“git merge”命令的一个组合
$ git pull origin testing

2.2 diff    比较差异内容
# 查看当前修改和最近提交的差异
$ git diff
# 查看已经staged内容
$ git diff --cached
# 查看差异文件的列表
$ git diff origin/master --stat
# 查看当前修改和指定提交的差异
$ git diff 52d9d285077cd26b3a8566cc0ec0f2031129b30e 52d9d285077cd26b3a8566cc0ec0f2031129b30e
# 比较两次提交的差异，并指定特定的文件
$ git diff HEAD HEAD^ system/vold
# 通过比较工具进行比较
$ git difftool HEAD HEAD^ system/vold
$ git difftool --cached system/vold

2.3 add     跟踪修改文件
# stage好比将文件加入跟踪列表，只有stage的文件才会被提交
$ git add file1 file2 file3
$ git add .
$ git add -u
$ git add -A

2.4 rm      删除文件
$ git rm file1
$ git rm -r dir1

2.5 commit  提交和上传文件
$ git commit -m 'this is memo'

# 如果想省掉提交之前的“git add”命令，可以直接用
$ git commit -a -m 'this is memo'

# commit和commit -a的区别, commit -a相当于：
* 第一步：自动地add所有改动的代码，使得所有的开发代码都列于index file中
* 第二步：自动地删除那些在index file中但不在工作树中的文件
* 第三步：执行commit命令来提交

2.5.1 修改最近一次的提交记录
# 可以先"git add"添加遗漏的文件
# 再使用默认编辑器修改你的commit信息
$ git add leaked_files
$ git commit --amend
$ git commit --amend -m "new message"

2.6 push    上传文件
* 用法： git push remote_repo [local_branch:]remote_branch

# 提交所有修改到远程服务器，这样，其它团队成员才能更新到这些修改
$ git push origin testing
$ git push ssh://Zenki@gerrit.ext.ti.com:29418/apps/Foxconn/omap3/framework HEAD:refs/heads/master
$ git push -u origin gh-pages

# 将本地仓库master分支上的改动merge到远端仓库kernel-repo的redcoral_2.4分支
$ git push kernel-repo master:redcoral_2.4

2.7 log     显示日志信息
$ git log
# 显示简要的版本信息和日志
$ git log --pretty=oneline --since='2 days ago'
# 查看路线图
$ git log --oneline --decorate --graph
# 显示每个提交者的简要信息
$ git shortlog [-n | -w | -e]
# 显示每个版本的改动
$ git relog
# 显示事件日期格式
$ git log --pretty=format:'%h - %an -%ad -%s'
# 显示某个文件的相关的信息
$ git log repo/foo.c

2.8 show    显示仓库信息
$ git log -p -2
$ git show 66118f531f401430bfe1e9a811ff81bede8ada41
$ git show tag1:test.txt
$ git show HEAD^
$ git show HEAD~4

# 显示分支信息
$ git show-branch

# 显示引用信息
$ git show-ref

2.9 回滚和还原版本
2.9.1 revert 还原修改
# 提供一个版本号，git将还原该版本的修改，而之前的历史版本不会消失
$ git revert HEAD^

2.9.2 reset 回滚版本
# 回滚到给定版本的修改，之前的历史版本会消失
$ git reset HEAD^^
$ git reset file1 file2
$ git reset ded0993b22b7c81d82d17374eb5df9bf6e6f23a2

2.10 conflict 解决冲突
2.10.1 解决方法

	当merge命令自身无法解决冲突的时候，它会将工作树置于一种特殊的状态，
并且给用户提供冲突信息，以期用户可以自己解决这些问题。当然在这个时候，
未发生冲突的代码已经被“git merge”登记在了“index file”里了。
如果你这个时候使用“git diff”，显示出来的只是发生冲突的代码信息。
    在你解决了冲突之前，发生冲突的文件会一直在“index file”中被标记出来。
这个时候，如果你使用“git commit”提交的话，git会提示：“filename.txt needs merge”
    在发生冲突的时候，如果你使用“git status”命令，那么会显示出发生冲突的具体信息。
    在你解决了冲突之后，你可以使用如下步骤来提交：

        * 第一步：编辑修改冲突文件(如果需要增加文件)：
        $ git add file1

        * 第二步：提交修改代码
        $ git commit

2.10.2 冲突文件说明
# 冲突文件由以下形式组成：
# >>>与===号之间是我的修改。
# ===和>>>号之间是别人的修改。
# 如以下形式
<<<<<<< HEAD
我的修改
=======
别人的修改
>>>>>>> 

2.11 恢复修改文件
2.11.1 pull 从远程更新库
* 用法：git pull remote_repo [remote_branch:]local_branch

# 用rebase的方式更新
$ git pull --rebase origin

# 将服务器origin库更新到本地testing
$ git pull origin testing

# 将远端仓库kernel-repo的redcoral_2.4分支的改动merge到本地的master分支
$ git pull kernel-repo redcoral_2.4:master

2.11.2 checkout 检出分支和历史版本
# 恢复修改过的文件
$ git checkout -f file1 file2

# 检出不带历史记录的分支
$ git checkout --orphan branch_A

2.12 清除暂存区
$ rm .git/index

2.13 查看分支和文件
2.13.1 ls-remote - 查看远程分支
$ git ls-remote master

2.13.2 ls-tree   - 查看库目录树
$ git ls-tree master

2.13.3 ls-files  - 查看库文件
$ git ls-files master

2.13.4 set-url && add - 变更和添加远程地址
$ git remote set-url origin git@182.168.6.79:android/test.git
$ git remote add someone git@182.168.6.79:android/test.git

3. Git 高级应用
3.1 patch   补丁生成和应用
3.1.1 生成标准patch
# 查看当前修改和最近提交的差异
$ git diff
# 查看当前修改和指定提交的差异
$ git diff 52d9d285077cd26b3a8566cc0ec0f2031129b30e 52d9d285077cd26b3a8566cc0ec0f2031129b30e
# 比较两次提交的差异，并指定特定的文件
$ git diff HEAD HEAD^ system/vold

3.1.2 生成git专用patch
# -M 表示分支名称
# -s 表示从历史的第几个版本开始，patch生成的方向是当前版本。-99999表示从很早的版本开始。
$ git format-patch -M master -s -99999 system/vold

3.1.3 应用补丁
# 应用diff生成的patch
$ git apply diff.patch

# 应用format-patch生成的patch
$ git am 0001-some-files.patch
# 遇到"previous rebase directory"错误或放弃am时，使用命令
$ git am --abort
# 跳过某个patch
$ git am --skip
# 解决冲突后使用命令
$ git am --resolved

3.2 branch  分支操作
3.2.1 branch - 创建分支
$ git branch testing

3.2.2 checkout - 切换分支
# 在创建分支前，如果有修改的文件，会延续到分支中。
# 并且这些修改可以在分支中被提交。
$ git checkout testing

3.2.3 merge	- 合并分支
# 切换到主分支master，然后合并testing的分支
# 如果合并发生冲突，需要自己解决冲突
$ git checkout master
$ git merge -no-ff testing

3.2.4 cherry-pick - 合并单独的commit
$ git cherry-pick [commit_hash]

3.2.4 查看远程分支
$ git branch -r

3.3 add     文件的几种方法
3.3.1 without deleted
# 添加模式，不包含删除模式
$ git add .

# Changes to be committed:
#   new file:   add-me
#   modified:   change-me
# Changed but not updated:
#   deleted:    delete-me

3.3.2 without new
# update模式，只更新已经跟踪的文件
$ git add -u

# Changes to be committed:
#   modified:   change-me
#   deleted:    delete-me
# Untracked files:
#   add-me

3.3.3 with all
# 包含所有文件
$ git add -A
# Changes to be committed:
#   new file:   add-me
#   modified:   change-me
#   deleted:    delete-me

3.3.4 交互式提交
$ git add -i

3.4 stash   当前修改
3.4.1 存储修改
# stash命令将当前的修改存储起来，去作其他的修改，而当前的状态
# 则是stash之前的状态。当提交了其他的修改后，在恢复存储的修改。
$ git stash
$ git stash save "message"

3.4.2 显示stash列表
$ git stash list
$ git stash show stash@{0}

3.4.3 恢复一个存储
$ git stash apply
$ git stash apply stash@{0}

3.4.4 清除存储仓库
$ git stash clear

3.5 gitignore   忽略某些文件
3.5.1 添加.gitignore
# 在任何目录下添加.gitignore文件，并加入不需要跟踪的文件名
# 以'#' 开始的行，被视为注释.
# 忽略掉所有文件名是 foo.txt 的文件.
foo.txt
# 忽略所有生成的html文件,
*.html
# foo.html是手工维护的，所以例外.
!foo.html
# 忽略所有.o和.a文件.
*.[oa]

3.5.2 编辑.git/info/exclude
# 将需要忽略的文件加入到exlcude文件中

3.6 tag     标签管理
3.6.1 添加标签
$ git tag -a v1.0 -m "tag v1.0"

3.6.2 分享标签
# 分享标签v1.0
$ git push origin v1.0
# 分享所有标签
$ git push origin --tags
$ git push origin refs/tags/*

3.6.3 列出所有标签
$ git tag -l

3.6.4 删除标签
# 删除本地标签
$ git tag -d v1.0
# 删除远程库的标签
$ git push origin :v1.0

3.7 hooks   自动化脚本
# 在.git/hooks/目录中可以编写各种脚本，
# 服务器可以在接收到代码提交时触发执行这些脚本。
# 将sample的后缀去掉后即可启动这些脚本。

3.8 查找问题
3.8.1 blame     查找文件的修改者
$ git blame filename
# 定位文件的行数
$ git blame -L 32,47 filename

3.8.2 bisect    二分查找法定位错误版本
# 当遇到某个版本出现问题时，使用该方法定位错误的版本
$ git bisect start
# 通过下面两条命令告诉git错误发生在哪两个版本之间
$ git bisect good 046aba80cd06ac2dd756a2004f9d1c3ad5aa89b1
$ git bisect bad master
# git会自动签出签一个版本，如果版本没有问题，则告诉git继续查找
$ git bisect good
# 如果遇到问题，则告诉git错误已经出现
$ git bisect bad
# 恢复到签出之前的状态
$ git bisect reset
# 使用GUI查看
$ git bisect visualize
# 查看签出信息
$ git bisect log

3.9 gc      垃圾清理
$ git gc

3.10 rebase 合并并行的分支
# 当本地开发和远程开发产生分叉时，可使用rebase来合并提交，消除这两个分叉。
# 下面操作的步骤是
# 1. 将mywork分支上的提交取消掉，并把它们保存为临时补丁（在.git/rebase中）。
# 2. 与origin合并，并根据临时补丁，创建新的提交。
# 3. 删除掉mywork分支上老的提交。
# 4. 最终结果看起来是删除了mywork上的分叉，和origin分支在同一个历史轨迹上。
$ git checkout mywork
$ git rebase origin
# 如果需要解决冲突后，继续rebase
$ git rebase --continue

# 图解rebase ############################
# ---------------------------------------
[origin]
				origin
				  |
				  v
c1 <- c2 <- c3 <- c4
		\
		 \--c5 <- c6
				   ^
				   |
				   mywork
# ---------------------------------------
[merge]         origin
                  |
                  v
c1 <- c2 <- c3 <- c4
        \           \
         \--c5 <- c6 \-- c7
                          ^
                          |
                        mywork
# ---------------------------------------
[rebase]        origin
                  |
                  v
c1 <- c2 <- c3 <- c4 <- c5 <- c6
                              ^
                              |
                              mywork
# ---------------------------------------

3.11 rebase & merge 恢复悬空对象
# 检查是否有误删的文件，它们会被显示为dangling对象
$ git fsck --lost-found
# 查看dangling对象
$ git show SHA1
# 恢复dangling对象，只能恢复提交内容
$ git rebase SHA1
# 恢复dangling对象，可恢复分支状态
$ git merge SHA1

3.12 filter-branch 分支过滤
3.12.1 从所有提交中删除文件
# 删除当前分支中所有提交的*.txt文件
$ git filter-branch --tree-filter 'rm -f *.txt' HEAD

3.13 verify-pack 查看打包信息
$ git verify-pack -v .git/objects/pack/pack-88f29e98ae1ce62becf81ee9e94f9d69adc964bf.idx

3.14 archive 代码归档
$ git archive -o ../updated.zip HEAD

4. Git 图形界面
# 查看历史版本的图形化工具
4.1 gitk
4.1.1 解决gitk显示抗锯齿问题
sudo apt-get install tk8.5 
sudo update-alternatives --config wish
# 或者修改/usr/bin/gitk
exec wish8.5 "$0" -- "$@"

# 修改和提交代码的图形化工具
4.2 git citool
4.2.1 解决弹出"zh_CN"错误框
# 在.gitconfig中加入以下配置
[gui]
    spellingdictionary = none

4.3 qgit

4.4 git信息统计数据
gitstats

vim:tw=78:ts=4:noet:ft=txt:
