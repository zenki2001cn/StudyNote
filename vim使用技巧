1. 普通模式

在shell中直接打vim filename就会进入普通模式。在这个状态，我们可以通过不同的按键对文件进行操作和切换到其它模式。按“:”可切换到命令模式，按i，o，a可进入编辑模。
1.1. 编辑

i
进入编辑模式。

o
在当前位置下插入一空行，进入编辑模式，光标位于空行的最开头。

a
光标后移一个字符，进入编辑模式。

v
这入可视模式，可用高亮的色块选择内容。

x or DEL键
删除当前字符，删除内容保存在缓冲区。

xp
左右字符互换。

dd
删除当前行，删除内容保存在缓冲区。

ddp
上下两行的内容互换。

d$
删除当前光标至行尾的所有内容。

dG
删除从当前行至文件未尾的所有行。

u
undo。

v
进地visual模式，移动光标可选择文本。

y
把当前行复制到缓冲区中。

p
把缓冲区中的文本插入到当前位置。

Ctrl+r
返回之前的后退状态

"ay
把当前行复制到a缓冲区。可用26个字母命名多个缓冲区。

"ap
把a缓冲区中的文本插入当前位置。

J
上下两行合并成一行。

.
英文句点的作用是重复执行上次执行的命令，如你按了"ap插入a缓冲区的内容，那你就可按"."来重复这个操作。

1.2. 光标移动

h，j，k，l
在 vim中，除了可使用光标键在移动光标外，还有一种更方便的光标移动方式。就是使用h，j，k，l这四个键来移动光标。h控制光标左移，j控制光标下移，k控制光标上移，l控制光标右移。通过使用这四个字母键就可使我们的手不用移动即可控制光标的移动。刚开始使用可能会有些不习惯，但熟练使用后你会发觉你的输入速度提高不少，强烈建议喜欢vim的朋友使用。

$
光标移动到行尾。

G
光标移动到文档末尾。

H,L
H控制光标移动到当前屏幕头，L控制光标移动到当前屏幕尾。

{，}
{控制光标上移一个段落，}控制光标下移一个段落

2. 编辑模式

ESC
退出编辑状态。

3. 命令模式
在普通模式上按“:”就可进入命令模式，在左下屏幕我们输入一些操作指令。

:q!
不保存退出vim。

:w
保存文档，但不退出vim。

:x
保存退出vim。

:! command
运行shell命令。

:e filename
编辑/打开一个文件

:s/emacs/vim
在当前行中把第一个emacs替换成vim。

:s/emacs/vim/g
把当前行中所有的emacs替换成vim。

:%s/emacs/vim/g
在全局范围内把emacs替换成vim。

:reg
列出缓冲区内容。

:set all
列出所有参数的配置情况。

:tabe
新建一个标签页。

:tabn or :tabp
切换到下一个\上一个标签页。

:close
关闭当前标签页。

:qa
关闭所有标签页退出。

4. vimrc配置
在命令模式下用set命令设置的东西是不能保存的，下次打开vim时又要重新设置。所以vim提供了一个配置文件叫vimrc，可以保存你的配置信息。该文件在Debian系统中位于/etc/vim/目录下。在该文件中，以双引号开头的是注释。

set autoindent
自动缩排，如当前行是从第3个字符的位置开始编辑的,按回车后光标会自动定位在下一行第三3个字符的位置。

set paste
置粘贴模式，这样粘贴过来的程序代码就不会错位了。

打开文件时自动回到上次编辑位置。

if has("autocmd")
autocmd BufRead *.txt set tw=78
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal g'\"" |
\ endif
endif

5. 生成vim文档缓存
:helptags ~/.vim/doc

6. 替换操作
语法为 :[addr]s/源字符串/目的字符串/[option]
全局替换命令为：:%s/源字符串/目的字符串/g

    [addr] 表示检索范围，省略时表示当前行。
    如：“1，20” ：表示从第1行到20行；
    “%” ：表示整个文件，同“1,$”；
    “. ,$” ：从当前行到文件尾；
    s : 表示替换操作
    [option] : 表示操作类型
    如：g 表示全局替换;
    c 表示进行确认
    p 表示替代结果逐行显示（Ctrl + L恢复屏幕）；
    省略option时仅对每行第一个匹配串进行替换；
    如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义

下面是一些例子：
#将That or this 换成 This or that
:%s/\(That\) or \(this\)/\u\2 or \l\1/
—-
#将句尾的child换成children
:%s/child\([ ,.;!:?]\)/children\1/g
—-
#将mgi/r/abox换成mgi/r/asquare
:g/mg\([ira]\)box/s//mg//my\1square/g    <=>  :g/mg[ira]box/s/box/square/g
—-
#将多个空格换成一个空格
:%s/  */ /g
—-
#使用空格替换句号或者冒号后面的一个或者多个空格
:%s/\([:.]\)  */\1 /g
—-
#删除所有空行
:g/^$/d
—-
#删除所有的空白行和空行
:g/^[  ][  ]*$/d
—-
#在每行的开始插入两个空白
:%s/^/>  /
—-
#在接下来的6行末尾加入.
:.,5/$/./
—-
#颠倒文件的行序
:g/.*/m0O  <=> :g/^/m0O
—-
#寻找不是数字的开始行,并将其移到文件尾部
:g!/^[0-9]/m$ <=> g/^[^0-9]/m$
—-
#将文件的第12到17行内容复制10词放到当前文件的尾部
:1,10g/^/12,17t$
~~~~重复次数的作用
—-
#将chapter开始行下面的第二行的内容写道begin文件中
:g/^chapter/.+2w>>begin
—-
:/^part2/,/^part3/g/^chapter/.+2w>>begin
—-
:/^part2/,/^part3/g/^chapter/.+2w>>begin|+t$第二篇：vi/vim 中可以使用 ：s 命令来替换字符串。该命令有很多种不同细节使用方法，可以实现复杂的功能，记录几种在此，方便以后查询。：s/vivian/sky/ 替换当前行第一个 vivian 为 sky：s/vivian/sky/g 替换当前行所有 vivian 为 sky

：n，$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky

：n，$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky

n 为数字，若 n 为 .，表示从当前行开始到最后一行

：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky

：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky

可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符

：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/

：%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/

6.1. :s/vivian/sky/ 替换当前行第一个 vivian 为 sky

：s/vivian/sky/g 替换当前行所有 vivian 为 sky

6.2. ：n，$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky

：n，$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky

（n 为数字，若 n 为 .，表示从当前行开始到最后一行）

6.3. ：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky

：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky

6.4. 可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符

：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/

6.5. 删除文本中的^M

问题描述：对于换行，window下用回车换行（0A0D）来表示，linux下是回车（0A）来表示。这样，将window上的文件拷到unix上用时，总会有个^M.请写个用在unix下的过滤windows文件的换行符（0D）的shell或c程序。

。 使用命令：cat filename1 | tr -d “^V^M” > newfile；

。 使用命令：sed -e “s/^V^M//” filename > outputfilename.需要注意的是在1、2两种方法中，^V和^M指的是Ctrl+V和Ctrl+M.你必须要手工进行输入，而不是粘贴。

。 在vi中处理：首先使用vi打开文件，然后按ESC键，接着输入命令：%s/^V^M//.

。 ：%s/^M$//g

如果上述方法无用，则正确的解决办法是： [Page]

。 tr -d \"\\r\" < src >dest

。 tr -d \"\\015\" dest

。 strings A>B
6.6. 替换确认
我们有很多时候会需要某个字符(串)在文章中某些位置出现时被替换，而其它位置不被替换的有选择的操作，这就需要用户来进行确认，vi的查找替换同样支持
例如
：s/vivian/sky/g 替换当前行所有 vivian 为 sky
在命令后面加上一个字母c就可以实现，即：s/vivian/sky/gc
顾名思意，c是confirm的缩写

6.7. 其它

利用 ：s 命令可以实现字符串的替换。具体的用法包括：

：s/str1/str2/ 用字符串 str2 替换行中首次出现的字符串 str1

：s/str1/str2/g 用字符串 str2 替换行中所有出现的字符串 str1

：。，$ s/str1/str2/g 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1

：1，$ s/str1/str2/g 用字符串 str2 替换正文中所有出现的字符串 str1

：g/str1/s//str2/g 功能同上

从上述替换命令可以看到：g 放在命令末尾，表示对搜索字符串的每次出现进行替换；不加 g，表示只对搜索

字符串的首次出现进行替换；g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作

% vim:ft=txt
